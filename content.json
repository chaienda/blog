{"meta":{"title":"陈达的博客","subtitle":"","description":"","author":"陈达","url":"http://itch_142.gitee.io/blog","root":"/blog/"},"pages":[{"title":"about","date":"2020-05-04T04:04:22.682Z","updated":"2020-05-04T04:04:22.682Z","comments":false,"path":"about/index.html","permalink":"http://itch_142.gitee.io/blog/about/","excerpt":"","text":""},{"title":"categories","date":"2020-05-04T04:07:09.274Z","updated":"2020-05-04T04:07:09.274Z","comments":false,"path":"categories/index.html","permalink":"http://itch_142.gitee.io/blog/categories/","excerpt":"","text":""},{"title":"links","date":"2020-05-04T16:37:52.008Z","updated":"2020-05-04T16:37:52.008Z","comments":true,"path":"links/index.html","permalink":"http://itch_142.gitee.io/blog/links/","excerpt":"","text":""},{"title":"repository","date":"2020-05-04T04:06:30.120Z","updated":"2020-05-04T04:06:30.120Z","comments":false,"path":"repository/index.html","permalink":"http://itch_142.gitee.io/blog/repository/","excerpt":"","text":""},{"title":"tags","date":"2020-05-04T04:06:52.575Z","updated":"2020-05-04T04:06:52.575Z","comments":false,"path":"tags/index.html","permalink":"http://itch_142.gitee.io/blog/tags/","excerpt":"","text":""}],"posts":[{"title":"jvm 性能调优","slug":"jvm","date":"2020-05-03T16:21:37.000Z","updated":"2020-05-04T03:28:21.123Z","comments":true,"path":"2020/05/04/jvm/","link":"","permalink":"http://itch_142.gitee.io/blog/2020/05/04/jvm/","excerpt":"","text":"jvm JVM构成: 代码的执行 内存管理 线程资源同步和交互机制 JVM的线程: hotspot JVM线程与原生操作系统线程具有映射关系 虚拟机线程 周期性线程 GC线程 编译器线程 信号分发线程 JVM的内存区域 线程私有内存:栈… 虚拟机栈：会栈溢出 本地方法栈： 程序计数器：唯一不会内存溢出的地方，当前执行方法指令的字节码地址 线程共享内存:堆 方法区、常量池 : 常量\\类信息\\静态变量 ， 分代机制里面的老年代 类实例区(老年代、新生代(Eden,From survivor,to survivor)) 直接内存:不受GC管理、NIO内存映射 内存分代 Young（3/1） 、Eden (8/10) 、 Survivor to/form(10/1) 、Old(3/2) MinorGC 频繁执行 针对Young ,复制&gt;清空&gt;互换 MajorGC 针对Old 扫描回收，标记清除算法 java8永久代被’元数据区取代’，元数据使用本地内存，所以不再由MaxPermSize影响 垃圾回收 GC做三件事：确定哪些是垃圾，确定什么时候回收，怎么回收 确定哪些是垃圾 引用计数：循环引用问题 根可答性算法:不可答不等于可回收，至少两次标记 垃圾算法 标记清除算法（Mark-Sweep）:内存碎片 复制算法(copying):可用内存少 标记整理算法(Mark-Compact):标记后整理存活的到内存边界，删除边界外 分代收集算法:大多JVM采用，先分域 （老/新），根据不同的域选择不同算法 Young GC 新生代复制算法: eden和S_From 存活的复制到S_to,超出到Old,然后清理eden和S_From,from与to角色互换 Full GC 老年代标记整理算法： Survivor 区躲过一次GC其年龄加1，默认到15年龄的对象会移到老年区域 分区收集算法:将堆划分成连续不同的小区间，每个区间独立使用，好处是可以控制一次回收多少区间，根据目标停顿的时间，每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿。","categories":[{"name":"java","slug":"java","permalink":"http://itch_142.gitee.io/blog/categories/java/"}],"tags":[{"name":"总结","slug":"总结","permalink":"http://itch_142.gitee.io/blog/tags/%E6%80%BB%E7%BB%93/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-05-03T10:16:12.216Z","updated":"2020-05-03T10:16:12.216Z","comments":true,"path":"2020/05/03/hello-world/","link":"","permalink":"http://itch_142.gitee.io/blog/2020/05/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"java","slug":"java","permalink":"http://itch_142.gitee.io/blog/categories/java/"}],"tags":[{"name":"总结","slug":"总结","permalink":"http://itch_142.gitee.io/blog/tags/%E6%80%BB%E7%BB%93/"}]}